{"ast":null,"code":"var _jsxFileName = \"/home/anand/Desktop/Wordle_clone/wordle/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, generateWordSet } from \"./Words\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = createContext();\n\nfunction App() {\n  _s();\n\n  const [board, setBoard] = useState(boardDefault);\n  useEffect(() => {\n    generateWordSet().then(words => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) return;\n    let currWord = \"\";\n\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({\n        attempt: currAttempt.attempt + 1,\n        letter: 0\n      });\n    } else {\n      alert(\"Word not found\");\n    }\n\n    if (currWord === correctWord) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: true\n      });\n      return;\n    }\n\n    console.log(currAttempt);\n\n    if (currAttempt.attempt === 5) {\n      setGameOver({\n        gameOver: true,\n        guessedWord: false\n      });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt,\n      letter: currAttempt.letter - 1\n    });\n  };\n\n  const onSelectLetter = key => {\n    if (currAttempt.letter > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wordle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n      value: {\n        board,\n        setBoard,\n        currAttempt,\n        setCurrAttempt,\n        correctWord,\n        onSelectLetter,\n        onDelete,\n        onEnter,\n        setDisabledLetters,\n        disabledLetters,\n        gameOver\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), gameOver.gameOver ? /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 32\n        }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xlyM5DWsdc1ExnBLCElyfNHoSBs=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/anand/Desktop/Wordle_clone/wordle/src/App.js"],"names":["Board","Keyboard","boardDefault","generateWordSet","AppContext","createContext","App","board","setBoard","useState","useEffect","then","words","setWordSet","wordSet","setCorrectWord","todaysWord","onEnter","currAttempt","letter","currWord","i","attempt","has","toLowerCase","setCurrAttempt","alert","correctWord","setGameOver","gameOver","guessedWord","console","log","onDelete","newBoard","onSelectLetter","key","setDisabledLetters","disabledLetters"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport Board from \"./components/Board\";\nimport Keyboard from \"./components/Keyboard\";\nimport { boardDefault, generateWordSet } from \"./Words\";\n\nexport const AppContext = createContext();\n\nfunction App() {\n  const [board, setBoard] = useState(boardDefault);\n\n\n  useEffect(() => {\n    generateWordSet().then((words) => {\n      setWordSet(words.wordSet);\n      setCorrectWord(words.todaysWord);\n    });\n  }, []);\n\n  const onEnter = () => {\n    if (currAttempt.letter !== 5) return;\n\n    let currWord = \"\";\n    for (let i = 0; i < 5; i++) {\n      currWord += board[currAttempt.attempt][i];\n    }\n    if (wordSet.has(currWord.toLowerCase())) {\n      setCurrAttempt({ attempt: currAttempt.attempt + 1, letter: 0 });\n    } else {\n      alert(\"Word not found\");\n    }\n\n    if (currWord === correctWord) {\n      setGameOver({ gameOver: true, guessedWord: true });\n      return;\n    }\n    console.log(currAttempt);\n    if (currAttempt.attempt === 5) {\n      setGameOver({ gameOver: true, guessedWord: false });\n      return;\n    }\n  };\n\n  const onDelete = () => {\n    if (currAttempt.letter === 0) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter - 1] = \"\";\n    setBoard(newBoard);\n    setCurrAttempt({ ...currAttempt, letter: currAttempt.letter - 1 });\n  };\n\n  const onSelectLetter = (key) => {\n    if (currAttempt.letter > 4) return;\n    const newBoard = [...board];\n    newBoard[currAttempt.attempt][currAttempt.letter] = key;\n    setBoard(newBoard);\n    setCurrAttempt({\n      attempt: currAttempt.attempt,\n      letter: currAttempt.letter + 1,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <nav>\n        <h1>Wordle</h1>\n      </nav>\n      <AppContext.Provider\n        value={{\n          board,\n          setBoard,\n          currAttempt,\n          setCurrAttempt,\n          correctWord,\n          onSelectLetter,\n          onDelete,\n          onEnter,\n          setDisabledLetters,\n          disabledLetters,\n          gameOver,\n        }}\n      >\n        <div className=\"game\">\n          <Board />\n          {gameOver.gameOver ? <GameOver /> : <Keyboard />}\n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}